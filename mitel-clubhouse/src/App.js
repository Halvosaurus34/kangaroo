import React, { useState } from 'react';
import './App.css';
import axios from 'axios';
// import jwt_decode from 'jwt-decode';
// import Video from 'twilio-video';
import twilioSdk from './utilities/twilio';
// import { disconnect } from 'twilio-video'

import { Button, TextField, Card, CardContent } from '@material-ui/core';

function App() {

  const [state, setState] = useState({
    identity: null,  /* Will hold the fake name assigned to the client. The name is generated by faker on the server */
    roomName: '',    /* Will store the room name */
    roomNameErr: false,  /* Track error for room name TextField. This will enable us to show an error message when this variable is true */
    previewTracks: null,
    localMediaAvailable: false, /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */
    hasJoinedRoom: false,
    activeRoom: null, // Track the current active room
    token: null,
    roomSID: null,
  });

  const handleRoomNameChange = (event) => {
    setState((prev) => ({
      ...prev,
      roomName: event.target.value,
    }));
  };

  const joinRoom = async () => {
    const userName = `user${Math.random()*100}`;
    const roomName = state.roomName;
    const token = twilioSdk.fetchVideoToken(userName, roomName);
    const currRoom = await twilioSdk.joinMediaRoom(token, roomName);
    setState((prev) => ({
      ...prev,
      activeRoom: currRoom,
    }))
    twilioSdk.subscribeToRoomMedia(currRoom, 'remote-audio');
    twilioSdk.subscribeToMediaChanges(currRoom, 'remote-audio');

  };

  const createNewRoom = () => {
    axios.post(`/createRoom/${state.roomName}`)
    .then((res) => {
      setState((prev) => ({
        ...prev,
        roomSID: res.data.sid,
      }));
    })
  };

  const leaveRoom = () => {
    if(state.roomName) {
      const videoRoom = state.activeRoom
      // videoRoom.disconnect();
      console.log('leaving room');
      twilioSdk.leaveMediaRoom(videoRoom, 'remote-audio');
      setState((prev) => ({
        ...prev,
        roomName: '',
      }))
    };
  };

  return (
    <div className="App">
        <div>
          <h1>MITEL CORPORATE CLUBHOUSE</h1>
        </div>
        <audio id="remote-audio" autoPlay playsInline></audio>
        <Button variant="contained" onClick={createNewRoom}>Create Room</Button>
      <Card>
        <CardContent>
          <div className="flex-container">
            <div className="flex-item">
              <TextField id="RoomName" label="Room Name" value={state.roomName} onChange={(event) => {handleRoomNameChange(event)}}></TextField>
              <br />
              <Button variant="contained" onClick={joinRoom}>Join Room</Button>
              <br />
              <br />
              <Button variant="contained" onClick={leaveRoom}>Leave Room</Button>
            </div>
        </div>
      </CardContent>
    </Card>
    </div>
  );
};

export default App;
